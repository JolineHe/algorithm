/*1011. 在 D 天内送达包裹的能力
二分答案法，见代码内注释
*/


class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int left = 0;
        int right = 0;
        for(int i=0;i<weights.length;i++){        
            if(weights[i]>left){           //left值为单个包裹最大重量
                left = weights[i];         //rifht值为所有包裹的重量
            }
            right+=weights[i];
        }
        //在[left,right]之间做不等式二分，寻找满足条件的的最小运载力
        while(left<right){
            int mid = (left+right)/2;
            if(validate(mid,weights,days)){      //如果mid值可行，找可能更小的值
                right = mid;
            }else{                   //如果mid值不可行，往大的找
                left = mid+1;
            }
        }
        return right;
    }


    boolean validate(int load, int[] weights, int days){
        int charge=0;
        int cnt=0;
        for(int i=0;i<weights.length;i++){
            charge+=weights[i];
            if(charge>load){
                cnt++;
                charge=0;
                i--;
            }
            if(cnt==days && i<weights.length-1){
                return false;
            }
        }
        if(cnt<=days){        //注意此处=
            return true;
        }else{
            return false;
        }
    }

}




/*875. 爱吃香蕉的珂珂
解题思路
H小时吃掉香蕉的最大速度：一小时一堆，速度为max(piles[i])
可能的最小速度为1，但是很可能在H小时内吃不完
用二分答案，在1和max(piles[i])中找可以在H小时内吃完所有香蕉的最小速度
*/

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int left=1;
        int right=0;
        for(int i=0;i<piles.length;i++){
            if(piles[i]>right){
                right=piles[i];
            }
        }
        while(left<right){
            int target=(left+right)/2;
            if(validate(piles,h,target)){
                right=target;
            }else{
                left=target+1;
            }
        }
        return left;
    }

    static boolean validate(int[] piles, int h, int v){
        int cnt=0;
        for(int i=0;i<piles.length;i++){
            if(piles[i]%v !=0){
                cnt+=(piles[i]/v)+1;
            }else{
                cnt+=piles[i]/v;
            }
        }
        if(cnt<=h){
            return true;
        }else{
            return false;
        }
    }
}