//解题思路：使用HashMap存储<域名，计数>
//难点之一在于如何在字符串里提取计数，以及分解一级域名，二级域名及可能的三级域名
//官方题解用了字符串的split方法，分解结果存在字符串数组里，是个值得掌握的一个方法
//另一个难点在于HashMap API的put方法，以及用keySet遍历取得value的方法
class Solution {
    public List<String> subdomainVisits(String[] cpdomains) {
    HashMap<String, Integer> countDomains = new HashMap<String, Integer>();
        for(String domain: cpdomains){
            int indexSpace = domain.indexOf(' ');
            int count = Integer.parseInt(domain.substring(0,indexSpace));

            int topLevel = domain.lastIndexOf('.');
            String topDomain = domain.substring(topLevel+1,domain.length());
            countDomains.put(topDomain, countDomains.getOrDefault(topDomain, 0) + count);

            int middleLevel = domain.indexOf('.');

            if(topLevel!=middleLevel){
                String middleDomain = domain.substring(middleLevel+1, domain.length());
                countDomains.put(middleDomain, countDomains.getOrDefault(middleDomain, 0) + count);

                String lowDomain = domain.substring(indexSpace+1, domain.length());
                countDomains.put(lowDomain, countDomains.getOrDefault(lowDomain, 0) + count);
            }else{
                String middleDomain = domain.substring(indexSpace+1, domain.length());
                countDomains.put(middleDomain, countDomains.getOrDefault(middleDomain, 0) + count);

            }
        }

        List<String> answer = new ArrayList();
        for (String dom: countDomains.keySet())
            answer.add("" + countDomains.get(dom) + " " + dom);
        return answer;

    }
}


//计算和为K的子数组
//解题思路：枚举
class Solution {
    public int subarraySum(int[] nums, int k) {
        int[] sumArray = new int[nums.length + 1];
        int ans = 0;
        for (int i = 0; i <= nums.length - 1; i++) {
            int sum=0;
            for (int j = i; j <= nums.length - 1; j++) {
                sum += nums[j];
                if(sum == k){
                    ans ++;
                }
            }
        }
        return ans;
    }
}





//解题思路：
//题目要求：找出数组的度，找出度对应的元素，可能有多个，找出最小长度的子数组的长度
//实现：扫描数组，用HashMap统计数组，键为数组元素，值为该个元素的计数以及最左最右的位置，<int,int[元素的度，最左，最右]>
class Solution {
    public int findShortestSubArray(int[] nums) {
        HashMap<Integer, int[]> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.get(nums[i])[0]++;
                map.get(nums[i])[2] = i;
            }else{
                map.put(nums[i],new int[]{1,i,i});
            }
        }

        int degree = 0;
        int length = 50000;
        for(Map.Entry<Integer, int[]> entry: map.entrySet()){
            if(entry.getValue()[0] > degree){
                degree = entry.getValue()[0];
                length = entry.getValue()[2] - entry.getValue()[1] +1;
            }else if(entry.getValue()[0] == degree){
                if(entry.getValue()[2] - entry.getValue()[1]+1 < length){
                    length = entry.getValue()[2] - entry.getValue()[1]+1;
                }
            }
        }
        return length;
    }
}